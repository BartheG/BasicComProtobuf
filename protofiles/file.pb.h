// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto;
namespace pb {
class Element;
class ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Element* Arena::CreateMaybeMessage<::pb::Element>(Arena*);
template<> ::pb::Map* Arena::CreateMaybeMessage<::pb::Map>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Element :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Element) */ {
 public:
  Element();
  virtual ~Element();

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Element& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Element* New() const final {
    return CreateMaybeMessage<Element>(nullptr);
  }

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Element& from);
  void MergeFrom(const Element& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Element";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompoFieldNumber = 2,
    kZFieldNumber = 1,
  };
  // repeated string _compo = 2;
  int _compo_size() const;
  private:
  int _internal__compo_size() const;
  public:
  void clear__compo();
  const std::string& _compo(int index) const;
  std::string* mutable__compo(int index);
  void set__compo(int index, const std::string& value);
  void set__compo(int index, std::string&& value);
  void set__compo(int index, const char* value);
  void set__compo(int index, const char* value, size_t size);
  std::string* add__compo();
  void add__compo(const std::string& value);
  void add__compo(std::string&& value);
  void add__compo(const char* value);
  void add__compo(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _compo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable__compo();
  private:
  const std::string& _internal__compo(int index) const;
  std::string* _internal_add__compo();
  public:

  // int64 _z = 1;
  void clear__z();
  ::PROTOBUF_NAMESPACE_ID::int64 _z() const;
  void set__z(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal__z() const;
  void _internal_set__z(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Element)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> _compo_;
  ::PROTOBUF_NAMESPACE_ID::int64 _z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class Map :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Map";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // repeated .pb.Element _map = 3;
  int _map_size() const;
  private:
  int _internal__map_size() const;
  public:
  void clear__map();
  ::pb::Element* mutable__map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Element >*
      mutable__map();
  private:
  const ::pb::Element& _internal__map(int index) const;
  ::pb::Element* _internal_add__map();
  public:
  const ::pb::Element& _map(int index) const;
  ::pb::Element* add__map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Element >&
      _map() const;

  // int64 _x = 1;
  void clear__x();
  ::PROTOBUF_NAMESPACE_ID::int64 _x() const;
  void set__x(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal__x() const;
  void _internal_set__x(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 _y = 2;
  void clear__y();
  ::PROTOBUF_NAMESPACE_ID::int64 _y() const;
  void set__y(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal__y() const;
  void _internal_set__y(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Map)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Element > _map_;
  ::PROTOBUF_NAMESPACE_ID::int64 _x_;
  ::PROTOBUF_NAMESPACE_ID::int64 _y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Element

// int64 _z = 1;
inline void Element::clear__z() {
  _z_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Element::_internal__z() const {
  return _z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Element::_z() const {
  // @@protoc_insertion_point(field_get:pb.Element._z)
  return _internal__z();
}
inline void Element::_internal_set__z(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  _z_ = value;
}
inline void Element::set__z(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set__z(value);
  // @@protoc_insertion_point(field_set:pb.Element._z)
}

// repeated string _compo = 2;
inline int Element::_internal__compo_size() const {
  return _compo_.size();
}
inline int Element::_compo_size() const {
  return _internal__compo_size();
}
inline void Element::clear__compo() {
  _compo_.Clear();
}
inline std::string* Element::add__compo() {
  // @@protoc_insertion_point(field_add_mutable:pb.Element._compo)
  return _internal_add__compo();
}
inline const std::string& Element::_internal__compo(int index) const {
  return _compo_.Get(index);
}
inline const std::string& Element::_compo(int index) const {
  // @@protoc_insertion_point(field_get:pb.Element._compo)
  return _internal__compo(index);
}
inline std::string* Element::mutable__compo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Element._compo)
  return _compo_.Mutable(index);
}
inline void Element::set__compo(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Element._compo)
  _compo_.Mutable(index)->assign(value);
}
inline void Element::set__compo(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Element._compo)
  _compo_.Mutable(index)->assign(std::move(value));
}
inline void Element::set__compo(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _compo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Element._compo)
}
inline void Element::set__compo(int index, const char* value, size_t size) {
  _compo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Element._compo)
}
inline std::string* Element::_internal_add__compo() {
  return _compo_.Add();
}
inline void Element::add__compo(const std::string& value) {
  _compo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Element._compo)
}
inline void Element::add__compo(std::string&& value) {
  _compo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Element._compo)
}
inline void Element::add__compo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _compo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Element._compo)
}
inline void Element::add__compo(const char* value, size_t size) {
  _compo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Element._compo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Element::_compo() const {
  // @@protoc_insertion_point(field_list:pb.Element._compo)
  return _compo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Element::mutable__compo() {
  // @@protoc_insertion_point(field_mutable_list:pb.Element._compo)
  return &_compo_;
}

// -------------------------------------------------------------------

// Map

// int64 _x = 1;
inline void Map::clear__x() {
  _x_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map::_internal__x() const {
  return _x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map::_x() const {
  // @@protoc_insertion_point(field_get:pb.Map._x)
  return _internal__x();
}
inline void Map::_internal_set__x(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  _x_ = value;
}
inline void Map::set__x(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set__x(value);
  // @@protoc_insertion_point(field_set:pb.Map._x)
}

// int64 _y = 2;
inline void Map::clear__y() {
  _y_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map::_internal__y() const {
  return _y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Map::_y() const {
  // @@protoc_insertion_point(field_get:pb.Map._y)
  return _internal__y();
}
inline void Map::_internal_set__y(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  _y_ = value;
}
inline void Map::set__y(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set__y(value);
  // @@protoc_insertion_point(field_set:pb.Map._y)
}

// repeated .pb.Element _map = 3;
inline int Map::_internal__map_size() const {
  return _map_.size();
}
inline int Map::_map_size() const {
  return _internal__map_size();
}
inline void Map::clear__map() {
  _map_.Clear();
}
inline ::pb::Element* Map::mutable__map(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Map._map)
  return _map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Element >*
Map::mutable__map() {
  // @@protoc_insertion_point(field_mutable_list:pb.Map._map)
  return &_map_;
}
inline const ::pb::Element& Map::_internal__map(int index) const {
  return _map_.Get(index);
}
inline const ::pb::Element& Map::_map(int index) const {
  // @@protoc_insertion_point(field_get:pb.Map._map)
  return _internal__map(index);
}
inline ::pb::Element* Map::_internal_add__map() {
  return _map_.Add();
}
inline ::pb::Element* Map::add__map() {
  // @@protoc_insertion_point(field_add:pb.Map._map)
  return _internal_add__map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Element >&
Map::_map() const {
  // @@protoc_insertion_point(field_list:pb.Map._map)
  return _map_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_2eproto
